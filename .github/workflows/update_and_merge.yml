# cd-repo/.github/workflows/update_and_merge.yml
name: 'Auto Deploy'

on:
  repository_dispatch:
    types: [trigger-from-ci-repo]

jobs:
  auto-deploy:
    runs-on: ubuntu-latest
    steps:
      # GitHub Appから認証トークンを生成
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: 'MyOrgEntrance'
          repositories: 'cicd-test-ci-repo, cicd-test-cd-repo'

      # 上記の認証トークンがアクセス可能なリポジトリ一覧を出力
      - name: List accessible repositories
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "--- Accessible repositories ---"
          gh api /installation/repositories | jq -r ".repositories[].full_name"
          echo "-------------------------------"

      # CDリポジトリ　チェックアウト
      - name: Checkout cd repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0 # 全ブランチの情報を取得するため

      # metadata.yamlのダウンロード
      - name: Download artifact from metadata.yaml
        uses: actions/download-artifact@v4
        with:
          # 生成したAppトークンを渡す
          github-token: ${{ steps.generate_token.outputs.token }}
          # ペイロードから受け取った情報を指定
          repository: ${{ github.event.client_payload.ci_repo }}
          run-id: ${{ github.event.client_payload.ci_run_id }}
          name: ${{ github.event.client_payload.ci_art_metadata_name }}

      # metadata.yamlの内容確認
      - name: Display metadata
        run: |
          echo "--- metadata.yaml ---"
          cat metadata.yaml
          echo "---------------------"

      # Gitのコミットユーザー情報を設定
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # yqのインストール (metadata.yamlのパース用)
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      # issuesブランチ作成
      - name: Create issues branch
        id: vars
        run: |
          # metadata.yamlからランダム文字列を抽出
          RANDOM_STRING=$(yq '.[] | select(.name == "sample-app") | .random' metadata.yaml)
          if [ -z "$RANDOM_STRING" ]; then
            echo "::error::Could not parse RANDOM_STRING from metadata.yaml"
            exit 1
          fi
          
          ISSUES_BRANCH_NAME="issues/auto-deploy-${RANDOM_STRING}"
          echo "issues_branch_name=${ISSUES_BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "random_id=${RANDOM_STRING}" >> $GITHUB_OUTPUT
          
          # mainブランチからissuesブランチを作成
          git checkout -b $ISSUES_BRANCH_NAME main

      # issuesブランチ更新
      - name: Update metadata.yaml and Push
        run: |
          git add metadata.yaml
          git commit -m "feat: Update metadata.yaml (${{ steps.vars.outputs.random_id }})"
          git push origin ${{ steps.vars.outputs.issues_branch_name }}


      # issuesブランチ -> mainブランチ更新
      - name: Create and Merge PR to main
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          ISSUES_BRANCH_NAME: ${{ steps.vars.outputs.issues_branch_name }}
          RANDOM_ID: ${{ steps.vars.outputs.random_id }}
        run: |
          echo "✅ Creating PR from $ISSUES_BRANCH_NAME to main."
          PR_URL=$(gh pr create \
            --base main \
            --head $ISSUES_BRANCH_NAME \
            --title "feat: Update metadata ($RANDOM_ID)" \
            --body "Auto-generated PR by GitHub Actions to update metadata.yaml.")
          
          echo "Merging PR: $PR_URL"
          gh pr merge $PR_URL --squash --delete-branch

      # main -> releaseブランチ更新
      - name: Create and Merge PR to release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          TARGET_BRANCH="release"

          # PRマージ後の最新のmainとreleaseの状態を取得
          echo "Fetching latest state of main and $TARGET_BRANCH branches..."
          git fetch origin main $TARGET_BRANCH

          # mainブランチがreleaseブランチより進んでいるコミット数を数える
          COMMITS_AHEAD=$(git rev-list --count origin/$TARGET_BRANCH..origin/main)

          # コミット差分がある場合のみPRを作成・マージする
          if [ $COMMITS_AHEAD -gt 0 ]; then
            echo "✅ Found $COMMITS_AHEAD commits to merge from main to $TARGET_BRANCH. Creating PR."
            PR_URL=$(gh pr create \
              --base $TARGET_BRANCH \
              --head main \
              --title "chore: Sync main to $TARGET_BRANCH" \
              --body "Auto-generated PR to sync main branch.")
            
            echo "Merging PR: $PR_URL"
            gh pr merge $PR_URL --merge
          else
            echo "ℹ️ No new commits to merge from main to $TARGET_BRANCH. Skipping PR creation."
          fi